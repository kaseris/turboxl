name: Build Linux wheels (PR merge to main)

on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  wheel-linux:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-22.04
    steps:
      - name: Check out merge commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Set up QEMU (for aarch64)
        uses: docker/setup-qemu-action@v3

      - name: Set up Python (for cibuildwheel runner)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install cibuildwheel
        run: |
          python -m pip install -U pip cibuildwheel

      - name: Build Linux wheels with cibuildwheel
        env:
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_ENVIRONMENT: >
            CMAKE_BUILD_PARALLEL_LEVEL=4
            PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig
            LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH
            PATH=/opt/cmake/bin:$PATH
          CIBW_BEFORE_ALL_LINUX: |
            set -euxo pipefail
            yum install -y gcc gcc-c++ make pkgconfig libxml2-devel zlib-devel curl tar

            # Install modern CMake (required >= 3.20)
            CMAKE_VER=3.27.9
            ARCH=$(uname -m)
            if [ "$ARCH" = "x86_64" ]; then CMAKE_PKG=cmake-${CMAKE_VER}-linux-x86_64.tar.gz; else CMAKE_PKG=cmake-${CMAKE_VER}-linux-aarch64.tar.gz; fi
            curl -L -o /tmp/${CMAKE_PKG} https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER}/${CMAKE_PKG}
            mkdir -p /opt/cmake && tar -xzf /tmp/${CMAKE_PKG} -C /opt/cmake --strip-components=1
            export PATH=/opt/cmake/bin:$PATH

            # Build and install minizip-ng from source (provides pkg-config file)
            MZ_VER=4.0.7
            curl -L -o /tmp/minizip-ng.tar.gz https://github.com/zlib-ng/minizip-ng/archive/refs/tags/${MZ_VER}.tar.gz
            mkdir -p /tmp/minizip-ng && tar -xf /tmp/minizip-ng.tar.gz -C /tmp/minizip-ng --strip-components=1
            cmake -S /tmp/minizip-ng -B /tmp/minizip-ng/build \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_SHARED_LIBS=ON \
              -DMZ_BUILD_TESTS=OFF \
              -DMZ_FETCH_LIBS=OFF \
              -DMZ_COMPAT=ON \
              -DMZ_ZLIB=ON \
              -DMZ_OPENSSL=OFF \
              -DMZ_BZIP2=OFF \
              -DMZ_LIBBSD=OFF
            cmake --build /tmp/minizip-ng/build --parallel
            cmake --install /tmp/minizip-ng/build

            # Ensure pkg-config name matches our CMake find ("minizip-ng")
            if [ -f /usr/local/lib/pkgconfig/minizip.pc ]; then
              sed -e 's/^Name:.*/Name: minizip-ng/' \
                  /usr/local/lib/pkgconfig/minizip.pc > /usr/local/lib/pkgconfig/minizip-ng.pc
            fi

            # Provide expected include path for compat headers
            if [ -d /usr/local/include/minizip ] && [ ! -e /usr/local/include/minizip-ng ]; then
              ln -s /usr/local/include/minizip /usr/local/include/minizip-ng
            fi

            # Quick visibility/debug
            ls -la /usr/local/lib/pkgconfig || true
            (pkg-config --print-errors --modversion minizip-ng || pkg-config --modversion minizip || true)
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: wheelhouse/*.whl

  publish:
    needs: wheel-linux
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  release-assets:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux
          path: dist

      - name: Upload wheels to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          tag_name: v0.1.8
          name: v0.1.8
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
