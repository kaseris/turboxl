name: Build Linux wheels (PR merge to main)

on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  wheel-linux:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-22.04
    steps:
      - name: Check out merge commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Set up QEMU (for aarch64)
        uses: docker/setup-qemu-action@v3

      - name: Set up Python (for cibuildwheel runner)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install cibuildwheel
        run: |
          python -m pip install -U pip cibuildwheel

      - name: Build Linux wheels with cibuildwheel
        env:
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_ENVIRONMENT: >
            CMAKE_BUILD_PARALLEL_LEVEL=4
            PKG_CONFIG_PATH=/opt/deps/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig
            LD_LIBRARY_PATH=/opt/deps/lib:/usr/local/lib:/usr/local/lib64:$LD_LIBRARY_PATH
            CMAKE_PREFIX_PATH=/opt/deps:/usr/local
            ZLIB_ROOT=/opt/deps
          CIBW_BEFORE_BUILD_LINUX: |
            set -euxo pipefail
            yum install -y gcc gcc-c++ make pkgconfig libxml2-devel git
            python -m pip install --upgrade pip cmake ninja

            # ---- zlib-ng (static, zlib-compat) ----
            git clone --depth 1 https://github.com/zlib-ng/zlib-ng.git /tmp/zlib-ng
            cmake -S /tmp/zlib-ng -B /tmp/build-zlib -G Ninja \
                  -DZLIB_COMPAT=ON \
                  -DBUILD_SHARED_LIBS=OFF \
                  -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                  -DCMAKE_INSTALL_PREFIX=/opt/deps
            cmake --build /tmp/build-zlib --target install --config Release

            # ---- minizip-ng (static) ----
            git clone --depth 1 https://github.com/zlib-ng/minizip-ng.git /tmp/minizip-ng
            cmake -S /tmp/minizip-ng -B /tmp/build-minizip -G Ninja \
                  -DMZ_ZLIB=ON \
                  -DMZ_OPENSSL=OFF \
                  -DBUILD_SHARED_LIBS=OFF \
                  -DZLIB_ROOT=/opt/deps \
                  -DCMAKE_INSTALL_PREFIX=/opt/deps
            cmake --build /tmp/build-minizip --target install --config Release

            # Provide expected include path for compat headers used by code
            if [ -d /opt/deps/include/minizip ] && [ ! -e /opt/deps/include/minizip-ng ]; then \
              ln -s /opt/deps/include/minizip /opt/deps/include/minizip-ng; \
            fi

            # Quick visibility/debug
            ls -la /opt/deps/lib/pkgconfig || true
            (pkg-config --print-errors --modversion minizip || true)
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: wheelhouse/*.whl

  publish:
    needs: wheel-linux
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  release-assets:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux
          path: dist

      - name: Upload wheels to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          tag_name: v0.1.10
          name: v0.1.10
          target_commitish: ${{ github.event.pull_request.merge_commit_sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
